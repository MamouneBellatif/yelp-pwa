{"version":3,"sources":["services/YelpService.js","components/Search.js","components/Result.js","components/RestaurantDetails.js","App.js"],"names":["YelpService","axios","create","baseURL","proxyurl","headers","Authorization","defaults","common","styles","StyleSheet","container","flex","justifyContent","paddingHorizontal","input","height","borderColor","borderWidth","marginBottom","paddingLeft","SearchScreen","_ref","navigation","_useState","useState","_useState2","_slicedToArray","restaurant","setRestaurant","_useState3","_useState4","location","setLocation","_useState5","_useState6","setErreur","handleSearch","_ref2","_asyncToGenerator","console","log","response","get","params","term","navigate","results","data","businesses","error","Toast","show","type","position","text1","visibilityTime","autoHide","topOffset","bottomOffset","apply","arguments","_jsxs","View","style","children","_jsx","TextInput","value","onChangeText","placeholder","Button","title","onPress","backgroundColor","restaurantContainer","flexDirection","marginHorizontal","marginVertical","borderRadius","image","width","restaurantInfo","marginLeft","name","fontWeight","ResultsScreen","route","FlatList","renderItem","item","TouchableOpacity","restaurantId","id","Image","source","uri","image_url","Text","price","categories","map","cat","join","address1","keyExtractor","padding","restaurantDetails","restaurantName","fontSize","reviewsContainer","reviewsTitle","review","borderBottomWidth","borderBottomColor","paddingBottom","reviewUser","reviewRating","fontStyle","RestaurantDetailsScreen","reviews","setReviews","useEffect","fetchRestaurantDetails","fetchRestaurantReviews","_ref3","ScrollView","display_phone","rating","review_count","index","user","text","Stack","createStackNavigator","App","NavigationContainer","Navigator","initialRouteName","Screen","component","options","ref","setRef"],"mappings":"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","file":"static/js/app.7e29a03a.chunk.js","sourcesContent":["import axios from 'axios';\nconst proxyurl = \"https://purple-art-1f04.bellatif6169.workers.dev/\";\nconst apiKey =\n  'p2lseXmq5yarrSoE6PGD8hsXxBwmJV5U1dbV8FodsK26NFwKY3YcurmXSJi-3R9RhtiLpJRZbOi90665i5a_UZxA3RzsIu1gGnaYH24JzcSwoTrsp7_0Y_0xYYMhZHYx';\nconst baseUrl = 'https://api.yelp.com/v3/businesses';\n\nconst YelpService = axios.create({\n  baseURL:  proxyurl + baseUrl,\n  headers: {\n    Authorization: `Bearer ${apiKey}`,\n    },\n});\n\n//axios allo origin\nYelpService.defaults.headers.common['Access-Control-Allow-Origin'] = '*';\n//axios expect json\nYelpService.defaults.headers.common['Accept'] = 'application/json';\n\n\n// resolve cors issue\n// const YelpService = axios.create({ baseURL: baseUrl });\n// YelpService.interceptors.request.use(\n//   async (config) => {\n//     config.headers.Authorization = `Bearer ${apiKey}`;\n//     return config;\n//   },\n//   (error) => {\n//     return Promise.reject(error);\n//   },\n// );\n\n\nexport default YelpService;\n","// screens/SearchScreen.js\nimport React, { useState } from 'react';\nimport { View, TextInput, Button, Text, StyleSheet } from 'react-native';\nimport YelpService from \"../services/YelpService\";\nimport Toast from 'react-native-toast-message';\n\n    \nconst SearchScreen = ({ navigation }) => {\n  const [restaurant, setRestaurant] = useState('');\n  const [location, setLocation] = useState('');\n  const [erreur, setErreur] = useState(false);\n  const handleSearch = async () => {\n    console.log(\"resto\", restaurant);\n    try {\n      const response = await YelpService.get('/search', {\n        params: {\n          term: restaurant,\n          location: location,\n        },\n      });\n      \n      navigation.navigate('Results', { results: response.data.businesses });\n    } catch (error) {\n      setErreur(true);\n        Toast.show({\n        type: 'error',\n        position: 'bottom',\n        text1: 'Aucun résultat, veuillez réesseyer    ',\n        visibilityTime: 4000,\n        autoHide: true,\n        topOffset: 30,\n        bottomOffset: 40,\n      });\n      console.error('Error fetching data from Yelp API:', error);\n    }\n  };\n\n\n\n  return (\n    <View style={styles.container}>\n      <TextInput\n        style={styles.input}\n        value={restaurant}\n        onChangeText={setRestaurant}\n        placeholder=\"Nom du restaurant\"\n      />\n      <TextInput\n        style={styles.input}\n        value={location}\n        onChangeText={setLocation}\n        placeholder=\"Ville ou code postal\"\n      />\n      <Button title=\"Valider\" onPress={handleSearch} />\n    </View>\n  );\n};\n\nconst styles = StyleSheet.create({\n  container: {\n    flex: 1,\n    justifyContent: 'center',\n    paddingHorizontal: 10,\n  },\n  input: {\n    height: 40,\n    borderColor: 'gray',\n    borderWidth: 1,\n    marginBottom: 10,\n    paddingLeft: 10,\n  },\n});\n\nexport default SearchScreen;\n","// screens/ResultsScreen.js\nimport React from 'react';\nimport { View, Text, StyleSheet, FlatList, Image,TouchableOpacity  } from 'react-native';\nconst ResultsScreen = ({ route, navigation }) => {\n  const { results } = route.params;\n\n const renderItem = ({ item: restaurant }) => (\n       <TouchableOpacity onPress={() => navigation.navigate('RestaurantDetails', { restaurantId: restaurant.id })}>\n\n    <View style={styles.restaurantContainer}>\n      <Image style={styles.image} source={{ uri: restaurant.image_url }} />\n      <View style={styles.restaurantInfo}>\n        <Text style={styles.name}>{restaurant.name}</Text>\n        <Text>{restaurant.price}</Text>\n        <Text>{restaurant.categories.map((cat) => cat.title).join(', ')}</Text>\n        <Text>{restaurant.location.address1}</Text>\n      </View>\n    </View>\n      \n        </TouchableOpacity>\n  );\n\n  return (\n    <View style={styles.container}>\n      <FlatList\n        data={results}\n        renderItem={renderItem}\n        keyExtractor={(restaurant) => restaurant.id}\n      />\n    </View>\n  );\n};\n\nconst styles = StyleSheet.create({\n  container: {\n    flex: 1,\n    backgroundColor: '#fff',\n  },\n  restaurantContainer: {\n    flexDirection: 'row',\n    marginHorizontal: 10,\n    marginVertical: 5,\n    backgroundColor: '#f5f5f5',\n    borderRadius: 5,\n  },\n  image: {\n    width: 100,\n    height: 100,\n    borderRadius: 5,\n  },\n  restaurantInfo: {\n    marginLeft: 10,\n    justifyContent: 'space-around',\n    flex: 1,\n  },\n  name: {\n    fontWeight: 'bold',\n  },\n});\n\nexport default ResultsScreen;\n","// screens/RestaurantDetailsScreen.js\nimport React, { useEffect, useState } from 'react';\nimport { View, Text, StyleSheet, ScrollView, Image } from 'react-native';\nimport YelpService from '../services/YelpService';\n\nconst RestaurantDetailsScreen = ({ route }) => {\n  const { restaurantId } = route.params;\n\n  const [restaurant, setRestaurant] = useState(null);\n  const [reviews, setReviews] = useState([]);\n\n  useEffect(() => {\n    const fetchRestaurantDetails = async () => {\n      try {\n        const response = await YelpService.get(`/${restaurantId}`);\n        setRestaurant(response.data);\n      } catch (error) {\n        console.error('Error fetching restaurant details:', error);\n      }\n    };\n\n    const fetchRestaurantReviews = async () => {\n      try {\n        const response = await YelpService.get(`/${restaurantId}/reviews`);\n        setReviews(response.data.reviews);\n      } catch (error) {\n        console.error('Error fetching restaurant reviews:', error);\n      }\n    };\n\n    fetchRestaurantDetails();\n    fetchRestaurantReviews();\n  }, [restaurantId]);\n\n  if (!restaurant) {\n    return <Text>Loading...</Text>;\n  }\n\nreturn (\n<ScrollView style={styles.container}>\n      <Image style={styles.image} source={{ uri: restaurant.image_url }} />\n      <View style={styles.restaurantDetails}>\n        <Text style={styles.restaurantName}>{restaurant.name}</Text>\n        <Text>{restaurant.price} - {restaurant.categories.map((cat) => cat.title).join(', ')}</Text>\n        <Text>{restaurant.location.address1}</Text>\n        <Text>Telephone: {restaurant.display_phone}</Text>\n        <Text>Note: {restaurant.rating} ({restaurant.review_count} avis)</Text>\n      </View>\n      <View style={styles.reviewsContainer}>\n        <Text style={styles.reviewsTitle}>Avis:</Text>\n        {reviews.map((review, index) => (\n          <View key={index} style={styles.review}>\n            <Text style={styles.reviewUser}>{review.user.name}:</Text>\n            <Text>{review.text}</Text>\n            <Text style={styles.reviewRating}>Rating: {review.rating}</Text>\n          </View>\n        ))}\n      </View>\n    </ScrollView>\n);\n};\nconst styles = StyleSheet.create({\n  container: {\n    flex: 1,\n    backgroundColor: '#fff',\n    padding: 10,\n  },\n  image: {\n    width: '100%',\n    height: 200,\n    marginBottom: 15,\n  },\n  restaurantDetails: {\n    marginBottom: 20,\n  },\n  restaurantName: {\n    fontSize: 24,\n    fontWeight: 'bold',\n    marginBottom: 5,\n  },\n  reviewsContainer: {},\n  reviewsTitle: {\n    fontSize: 20,\n    fontWeight: 'bold',\n    marginBottom: 10,\n  },\n  review: {\n    marginBottom: 10,\n    borderBottomWidth: 1,\n    borderBottomColor: '#ccc',\n    paddingBottom: 10,\n  },\n  reviewUser: {\n    fontWeight: 'bold',\n  },\n  reviewRating: {\n    fontStyle: 'italic',\n  },\n});\n\nexport default RestaurantDetailsScreen;\n","// App.js\nimport React from 'react';\nimport { NavigationContainer } from '@react-navigation/native';\nimport { createStackNavigator } from '@react-navigation/stack';\nimport SearchScreen from './components/Search';\nimport ResultsScreen from './components/Result';\nimport RestaurantDetailsScreen from './components/RestaurantDetails'\nimport Toast from 'react-native-toast-message';\n\nconst Stack = createStackNavigator();\n\nconst App = () => {\n  return (\n    <NavigationContainer>\n      <Stack.Navigator initialRouteName=\"Search\">\n        <Stack.Screen name=\"Search\" component={SearchScreen} options={{ title: 'Recherche' }} />\n        <Stack.Screen name=\"Results\" component={ResultsScreen} options={{ title: 'Résultats' }} />\n        <Stack.Screen\n        name=\"RestaurantDetails\"\n        component={RestaurantDetailsScreen}\n        options={{ title: \"Détails du restaurant\"}}\n        />\n      </Stack.Navigator>\n      <Toast ref={(ref) => Toast.setRef(ref)} />\n    </NavigationContainer>\n  );\n};\n\n\n\nexport default App;"],"sourceRoot":""}